// Generated by gencpp from file show_information/status.msg
// DO NOT EDIT!


#ifndef SHOW_INFORMATION_MESSAGE_STATUS_H
#define SHOW_INFORMATION_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace show_information
{
template <class ContainerAllocator>
struct status_
{
  typedef status_<ContainerAllocator> Type;

  status_()
    : light_mode(0)
    , battery_voltage(0.0)
    , motor_num(0)
    , linear(0.0)
    , angular(0.0)
    , motor_current(0.0)
    , motor_rpm(0.0)
    , motor_pulses(0)
    , motor_temperature(0.0)
    , driver_voltage(0.0)
    , driver_state(0)
    , driver_temperature(0.0)  {
    }
  status_(const ContainerAllocator& _alloc)
    : light_mode(0)
    , battery_voltage(0.0)
    , motor_num(0)
    , linear(0.0)
    , angular(0.0)
    , motor_current(0.0)
    , motor_rpm(0.0)
    , motor_pulses(0)
    , motor_temperature(0.0)
    , driver_voltage(0.0)
    , driver_state(0)
    , driver_temperature(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _light_mode_type;
  _light_mode_type light_mode;

   typedef double _battery_voltage_type;
  _battery_voltage_type battery_voltage;

   typedef uint8_t _motor_num_type;
  _motor_num_type motor_num;

   typedef double _linear_type;
  _linear_type linear;

   typedef double _angular_type;
  _angular_type angular;

   typedef double _motor_current_type;
  _motor_current_type motor_current;

   typedef double _motor_rpm_type;
  _motor_rpm_type motor_rpm;

   typedef uint16_t _motor_pulses_type;
  _motor_pulses_type motor_pulses;

   typedef double _motor_temperature_type;
  _motor_temperature_type motor_temperature;

   typedef double _driver_voltage_type;
  _driver_voltage_type driver_voltage;

   typedef uint8_t _driver_state_type;
  _driver_state_type driver_state;

   typedef double _driver_temperature_type;
  _driver_temperature_type driver_temperature;





  typedef boost::shared_ptr< ::show_information::status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::show_information::status_<ContainerAllocator> const> ConstPtr;

}; // struct status_

typedef ::show_information::status_<std::allocator<void> > status;

typedef boost::shared_ptr< ::show_information::status > statusPtr;
typedef boost::shared_ptr< ::show_information::status const> statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::show_information::status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::show_information::status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::show_information::status_<ContainerAllocator1> & lhs, const ::show_information::status_<ContainerAllocator2> & rhs)
{
  return lhs.light_mode == rhs.light_mode &&
    lhs.battery_voltage == rhs.battery_voltage &&
    lhs.motor_num == rhs.motor_num &&
    lhs.linear == rhs.linear &&
    lhs.angular == rhs.angular &&
    lhs.motor_current == rhs.motor_current &&
    lhs.motor_rpm == rhs.motor_rpm &&
    lhs.motor_pulses == rhs.motor_pulses &&
    lhs.motor_temperature == rhs.motor_temperature &&
    lhs.driver_voltage == rhs.driver_voltage &&
    lhs.driver_state == rhs.driver_state &&
    lhs.driver_temperature == rhs.driver_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::show_information::status_<ContainerAllocator1> & lhs, const ::show_information::status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace show_information

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::show_information::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::show_information::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::show_information::status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::show_information::status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::show_information::status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::show_information::status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::show_information::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f10f8621a8b3bc22f71a5abaea93181";
  }

  static const char* value(const ::show_information::status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f10f8621a8b3bc2ULL;
  static const uint64_t static_value2 = 0x2f71a5abaea93181ULL;
};

template<class ContainerAllocator>
struct DataType< ::show_information::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "show_information/status";
  }

  static const char* value(const ::show_information::status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::show_information::status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 light_mode  \n"
"float64 battery_voltage\n"
"uint8 motor_num\n"
"float64 linear\n"
"float64 angular\n"
"float64 motor_current\n"
"float64 motor_rpm\n"
"uint16 motor_pulses\n"
"float64 motor_temperature\n"
"float64 driver_voltage\n"
"uint8 driver_state\n"
"float64 driver_temperature\n"
;
  }

  static const char* value(const ::show_information::status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::show_information::status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.light_mode);
      stream.next(m.battery_voltage);
      stream.next(m.motor_num);
      stream.next(m.linear);
      stream.next(m.angular);
      stream.next(m.motor_current);
      stream.next(m.motor_rpm);
      stream.next(m.motor_pulses);
      stream.next(m.motor_temperature);
      stream.next(m.driver_voltage);
      stream.next(m.driver_state);
      stream.next(m.driver_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::show_information::status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::show_information::status_<ContainerAllocator>& v)
  {
    s << indent << "light_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.light_mode);
    s << indent << "battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.battery_voltage);
    s << indent << "motor_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_num);
    s << indent << "linear: ";
    Printer<double>::stream(s, indent + "  ", v.linear);
    s << indent << "angular: ";
    Printer<double>::stream(s, indent + "  ", v.angular);
    s << indent << "motor_current: ";
    Printer<double>::stream(s, indent + "  ", v.motor_current);
    s << indent << "motor_rpm: ";
    Printer<double>::stream(s, indent + "  ", v.motor_rpm);
    s << indent << "motor_pulses: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_pulses);
    s << indent << "motor_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.motor_temperature);
    s << indent << "driver_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.driver_voltage);
    s << indent << "driver_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.driver_state);
    s << indent << "driver_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.driver_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHOW_INFORMATION_MESSAGE_STATUS_H
